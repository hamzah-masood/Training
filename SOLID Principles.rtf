
Solid stands for: 

Single Responsibility Principle
Open/closed Principle
Liskov Substitution Principle
Interface Segregation Principle
Dependency Inversion Principle

These are not only good principles for Object Oriented Programming, but for programming in general too.


SRP is the most important principle, basically it says that every class should have one responsibility and reason to change. 
It should do no more and no less than that one responsibility. It only changes when it structurally needs to be changed.

OCP means that when writing code, you should extend the behavior of objects through inheritance, polymorphism and 
composition by implementing them using interfaces, abstractions and dependency injections. Essentially, extending 
the classes behavior without modifying it, so the initial class can be used same without it being changed completely.

LS is where objects should be replaceable with instances of their subtype, without change the correctness of the program.
Decorator design patter is a wrapper around another class to enhance its capabilities. So basically we can wrap our object
in multiple decorators and used them like the objects they decorate as they comply to the same protocol. 

IS instructs developers to make fine grained interacts that are client-specific. Basically have interfaces with single
responsibility to make sure you are not forcing your class which conforms to protocols to implement unwanted requirements
that were not required. 

DI is where high level modules should not depend on low level modules, both should depend on abstraction. Using protocols
we make sure high level modules aren\'92t coupled tightly with low level modules.
